# Nom du workflow tel qu’il apparaît sous l’onglet « Actions » du dépôt GitHub.
name: FLOW
on:
# Ajoutez l’événement pull_request pour que le workflow s’exécute automatiquement chaque fois qu’une demande de tirage est créée ou mise à jour.
  pull_request:
    branches:
      - main
      - develop
  # Ajoutez l’événement push pour que le workflow s’exécute automatiquement chaque fois qu’un commit est poussé vers une branche appelée develop.
  push:
    branches:
      # - main
      - develop
      # - pre-dev
#  Regroupe tous les travaux qui s’exécutent dans le fichier de workflow.
jobs:
  flutter_test: 
    name: Run flutter test and analyse
    # Configure le travail pour qu’il s’exécute sur un exécuteur ubuntu-latest ou macos-latest hébergé par GitHub
    runs-on: ubuntu-latest
    steps:
      - name: test
      # utilise l'action "checkout" pour récupérer le code source du projet à partir du référentiel GitHub.
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      # utilise l'action "subosito/flutter-action" pour installer la version stable de Flutter
      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable'
      - run: flutter pub get
      - run: flutter analyse
      - run: flutter test
      # - run: flutter build apk --debug --split-per-abi
      # - run: |
      #     flutter build ios --no-codesign
      #     cd build/ios/iphoneos
      #     mkdir Payload
      #     cd Payload
      #     ln -s ../Runner.app
      #     cd ..
      #     zip -r app.ipa Payload
      # - name: Push to Releases
      #   uses: ncipollo/release-action@v1
      #   with:
      #     artifacts: "build/app/outputs/apk/debug/*,build/ios/iphoneos/app.ipa"
      #     tag: v1.0.${{ github.run_number }}
      #     token: ${{ secrets.TOKEN }}
  build_appbundle:
    name: Build FLutter (Android)
    needs: [flutter_test]
    run-on: ubuntu-latest
    steps:
      # utilise l'action "checkout" pour récupérer le code source du projet à partir du référentiel GitHub.
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '12.x'
      # utilise l'action "subosito/flutter-action" pour installer la version stable de Flutter
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - run: flutter pub get
      - run: flutter clean
      - run: flutter build apk
      - run: flutter build appbundle
  
  build_appbundle:
    name: Build FLutter (ios)
    needs: [flutter_test]
    run-on: macos-latest
    steps:
      # utilise l'action "checkout" pour récupérer le code source du projet à partir du référentiel GitHub.
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '12.x'
      # utilise l'action "subosito/flutter-action" pour installer la version stable de Flutter
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - run: flutter pub get
      - run: flutter clean
      - run: flutter build ios --release --no-codesign

# push to master, main, develop
# pull request on main master